<?xml version="1.0" ?>
<questions>
	<question>
		<text>1. What is Python? How is it different from other programming languages?</text>
		<answer>Python is a high-level programming language known for its simplicity and readability. It is an interpreted language, which means the code is executed line by line without the need for compilation. Python emphasizes code readability and uses whitespace indentation to define code blocks. Unlike other languages like C++ or Java, Python does not use semicolons to terminate statements.</answer>
	</question> 
	<question>
		<text>2.  What are the key features of Python?</text>
		<answer>Key features of Python include: Simple and easy-to-read syntax, Interpreted language, Dynamic typing, Multi-paradigm (supports object-oriented, procedural, and functional programming), Rich standard library, Extensive community support.</answer>
	</question>
	<question>
		<text>3. Explain the differences between Python 2 and Python 3.</text>
		<answer>Python 3 is not backward compatible with Python 2 due to some fundamental changes in the language. The key differences include: Print statement: In Python 2, it is written as 'print &quot;Hello&quot;', while in Python 3, it is 'print(&quot;Hello&quot;)'. Integer division: In Python 2, dividing two integers performs integer division, while in Python 3, it returns a float. Unicode support: Python 3 handles strings as Unicode by default, whereas Python 2 treats them as ASCII. xrange(): Python 2 has xrange() for range iteration, while Python 3 uses the range() function for the same purpose.</answer>
	</question>
	<question>
		<text>4. What is PEP 8, and why is it important?</text>
		<answer>PEP 8 (Python Enhancement Proposal 8) is a style guide for writing Python code. It provides guidelines on how to format code to enhance readability and maintain consistency across projects. Adhering to PEP 8 is essential for writing clean, readable, and maintainable code, especially when collaborating with other developers.</answer>
	</question>
	<question>
		<text>5. How do you comment out a line in Python?</text>
		<answer>To comment out a line in Python, you can use the '#' symbol. Anything after the '#' symbol on the same line will be considered a comment and not executed as code.</answer>
	</question>
	<question>
		<text>6. What are docstrings in Python?</text>
		<answer>Docstrings are string literals used to document Python modules, classes, functions, or methods. They are placed as the first statement in these entities and provide information about their purpose, usage, and parameters. Docstrings can be accessed using the .doc attribute of an object.</answer>
	</question>
	<question>
		<text>7. What is the purpose of &quot;if name == 'main':&quot; in Python scripts?</text>
		<answer>The if __name__ == '__main__': block is used to differentiate between when a Python file is run as the main program or imported as a module. Code within this block will only execute when the file is run directly. If the file is imported as a module, the code inside this block will not run.</answer>
	</question>
	<question>
		<text>8. How do you handle exceptions in Python?</text>
		<answer>In Python, you use try-except blocks to handle exceptions. The code that might raise an exception is placed inside the try block, and the exception handling code is written in the except block. If an exception occurs in the try block, the code inside the corresponding except block will be executed.</answer>
	</question>
	<question>
		<text>9. What is the use of &quot;pass&quot; in Python?</text>
		<answer>pass is a null statement in Python, and it does nothing when executed. It is used as a placeholder when a statement is syntactically required but doesn't need to perform any action. For example, in an empty function or a loop that will be implemented later.</answer>
	</question>
	<question>
		<text>10. How do you open and close a file in Python?</text>
		<answer>To open a file, you use the open() function with the filename and mode as parameters. The modes can be 'r' for reading, 'w' for writing, 'a' for appending, and 'b' for binary mode. After processing the file, you should close it using the close() method of the file object.</answer>
	</question>
	<question>
		<text>11. Explain list comprehension in Python.</text>
		<answer>List comprehension is a concise and elegant way to create lists in Python. It allows you to generate a new list by applying an expression to each item in an existing iterable (e.g., a list, tuple, or string) while optionally filtering elements using a condition.</answer>
	</question>
	<question>
		<text>12. What is the difference between &quot;deep copy&quot; and &quot;shallow copy&quot;?</text>
		<answer>A deep copy creates a new object and recursively copies all the objects found in the original object. It means that the new object and its sub-objects are completely independent of the original. In contrast, a shallow copy creates a new object, but it only copies references to the original object's elements. If the elements are mutable objects, changes in one will affect the other.</answer>
	</question>
	<question>
		<text>13. How do you remove duplicates from a list in Python?</text>
		<answer>You can remove duplicates from a list in Python using various methods. One common way is to convert the list to a set, which automatically removes duplicates due to its unique nature. Then, if necessary, convert the set back to a list. Method 1: Using set my_list = [1, 2, 2, 3, 4, 4, 5] unique_list = list(set(my_list)) Method 2: Using list comprehension (preserves order) unique_list = [] [unique_list.append(item) for item in my_list if item not in unique_list]</answer>
	</question>
	<question>
		<text>14. What are decorators in Python?</text>
		<answer>Decorators are a powerful Python feature used to modify the behavior of functions or methods without changing their code. They allow you to wrap another function and perform actions before, after, or around the wrapped function. Decorators are denoted by the '@' symbol and are commonly used for logging, authorization, and memoization.</answer>
	</question>
	<question>
		<text>15. Explain the Global Interpreter Lock (GIL) in Python.</text>
		<answer>The Global Interpreter Lock (GIL) is a mechanism in CPython (the reference implementation of Python) that ensures only one thread executes Python bytecode at a time. It effectively limits the parallel execution of Python threads, making it challenging to achieve true multi-core CPU performance in CPU-bound Python</answer>
	</question>
</questions>
